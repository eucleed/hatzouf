{"name":"Hatzouf","tagline":"IOT Framework","body":"### Welcome to hatzouf IOT framework\r\nThe hatzouf iot framework is the easiest way to provide interconnection with electronic devices.\r\n\r\n### Get started\r\n\r\n#### Install the server\r\n\r\nAt least JDK 1.7 is required.\r\n\r\nDownload hatzouf server [Hatzouf](http://www.google.com)\r\n\r\nrun \r\nbin/startup.sh on linux \r\nor\r\nbin/startup.bat on windows\r\n\r\nCheck if server is running http://localhost:8080/iot\r\n\r\n#### Create a driver\r\n```\r\n<dependency>\r\n  <groupId>org.castafiore</groupId>\r\n  <artifactId>iot.driver.java</artifactId>\r\n  <version>0.0.1-SNAPSHOT</version>\r\n</dependency>\r\n\r\n```\r\n\r\n###Example \r\nIn this example we will create a simple remote controlled Lamp.\r\nWe need 2 devices: A lamp and a remote control with 2 buttons. On and Off\r\n\r\nThe remote control publishes 2 types of event : OnSwitchOn and OnSwitchOff\r\nThe lamp captures 2 events : SwitchOn and SwitchOff\r\n\r\nNow that we have made the design, let us build the system.\r\n\r\n####1.   The Lamp\r\nSince we do not have a device embedded with linux yet, we will create a simple java swing interface to emulate the lamp.\r\n\r\nThe lamp need to be able to receive 2 events. i.e. SwitchOn and SwitchOff\r\n\r\n```\r\npublic static void main(String[] args) {\r\n\t\t//1. Create an instance of device\r\n\t\tfinal Device lamp = new Device(\"Lamp\", \"Lamp\",\"Lamp\" ,\"lamp.png\");\r\n\t\t\r\n\t\t//2. Register the 2 functions\r\n\t\tlamp.registerFunction(\"SwitchOn\", \"Function exposed to server\");\r\n\t\tlamp.registerFunction(\"SwitchOff\", \"Function exposed to server for switching off the device\");\r\n\t\t\r\n\t\t//3. Set the type of communication layer. In this case it is a java implementation of websocket.\r\n\t\t//Depending the environment the driver is running, other implementation of the websocket layer can be injected\r\n\t\tlamp.setWebsocketLayer(new JavaWebsocketLayer(lamp));\r\n\t\t\r\n\t\t//a simple text label to display if lamp is on or off.\r\n\t\t//in a real lamp, instead displaying a label, the microcontroller will send an electric signal to a switch\r\n\t\tfinal JLabel state = new JLabel();\r\n\t\t\r\n\t\t//4. Add function handlers to execute the captured events\r\n\t\t//this implementation of the handler simply diplays Switched on or Switched off\r\n\t\tlamp.addFunctionHandler(new FunctionHandler() {\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic void execute(String name, Map<String, String> input) {\r\n\t\t\t\tif(name.equals(\"SwitchOn\")){\r\n\t\t\t\t\tSystem.out.println(\"Switched  on\");\r\n\t\t\t\t\tstate.setText(\"Switched on\");\r\n\t\t\t\t}else{\r\n\t\t\t\t\tSystem.out.println(\"Switched off\");\r\n\t\t\t\t\tstate.setText(\"Switched off\");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t//5. This handler is executed when the device is connected and ready for use.\r\n\t\tlamp.onReady(new OnReady() {\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic void ready() {\r\n\t\t\t\tJFrame frame = new JFrame(\"My switch\");\r\n\t\t\t\tframe.getContentPane().add(state, BorderLayout.NORTH);\r\n\t\t\t\tframe.setSize(200, 200);\r\n\t\t\t\tframe.setVisible(true);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t//6. connect the device to the hatzouf server\r\n\t\tlamp.connect(\"ws://localhost:8080/iot/websockets/iot\");\r\n\t\t\r\n\t}\r\n```\r\n\r\n####2.  The remote control.\r\nThe remote control need to publish 2 events i.e OnSwitchOn and OnSwitchOff\r\n\r\nHere is the code for creating the remote control.\r\n```\r\npublic static void main(String[] args) {\r\n\r\n\t\t//create an instance of the device\r\n\t\tfinal Device remotecontrol = new Device(\"SwitchRC\", \"SwitchRC\", \"Remote control\", \"remote.png\");\r\n\t\t//register the 2 events\r\n\t\tremotecontrol.registerEvent(\"OnSwitchOn\", \"Switch on\");\r\n\t\tremotecontrol.registerEvent(\"OnSwitchOff\", \"Switch off\");\r\n\t\t\r\n\t\t\r\n\t\tremotecontrol.onReady(new OnReady() {\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void ready() {\r\n\r\n\t\t\t\tString title = \"Remote control\";\r\n\t\t\t\tJFrame frame = new JFrame(title);\r\n\t\t\t\tframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n\t\t\t\tJButton switchon = new JButton(\"Switch on\");\r\n\t\t\t\tswitchon.addActionListener(new ActionListener() {\r\n\t\t\t\t\t\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\t\t\tremotecontrol.propagateEvent(\"OnSwitchOn\");\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tJButton switchoff = new JButton(\"Switch off\");\r\n\t\t\t\tswitchoff.addActionListener(new ActionListener() {\r\n\t\t\t\t\t\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\t\t\tremotecontrol.propagateEvent(\"OnSwitchOff\");\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tContainer contentPane = frame.getContentPane();\r\n\t\t\t\tcontentPane.add(switchon, BorderLayout.NORTH);\r\n\t\t\t\tcontentPane.add(switchoff, BorderLayout.CENTER);\r\n\r\n\t\t\t\tframe.setSize(300, 125);\r\n\t\t\t\tframe.setVisible(true);\r\n\r\n\t\t\t}\r\n\t\t});\r\n\t\t//set WebsocketLayer implementation\r\n\t\tremotecontrol.setWebsocketLayer(new JavaWebsocketLayer(remotecontrol));\r\n\t\t//connect to server\r\n\t\tremotecontrol.connect(\"ws://localhost:8080/iot/websockets/iot\");\r\n\t\t\r\n\r\n\t}\r\n```\r\n\r\n\r\n#### 3. The server\r\nUp to now, we have created our devices and connected them to the server.\r\nTo check if the devices are working properly:\r\ngo to [http://localhost:8080/iot](http://localhost:8080/iot)\r\nClick refresh.\r\nYou should see the devices and their status.\r\n\r\nWe need to create an iot application which will do the following\r\n1. Capture the OnSwitchOn event from the remote control and execute the SwichOn function in the lamp.\r\n\r\n2. Capture the OnSwitchOff event.....\r\n\r\nGood news an IOTApplet is in fact a spring managed bean.\r\n\r\nThe code below is the implementation of the IOTApplet\r\n\r\n```\r\npublic class RemoteControlApplet extends GenericIOTApplet {\r\n\r\n\tpublic RemoteControlApplet(){\r\n\t\t//add the required devices to be used\r\n\t\taddRequiredDeviceName(\"Lamp\");\r\n\t\taddRequiredDeviceName(\"SwitchRC\");\r\n\t\t\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void initDevice(Device device) {\r\n\t\t//when device is first initialised, we add the listener for the 2 events on the remote control\r\n\t\tif(device.getName().equals(\"SwitchRC\")){\r\n\t\t\tdevice.addEvent(new OnSwitchOn(), \"OnSwitchOn\");\r\n\t\t\tdevice.addEvent(new OnSwitchOff(), \"OnSwitchOff\");\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\t/**\r\n\t * Implementation of the OnSwitchOn listener\r\n\t *\r\n\t */\r\n\tclass OnSwitchOn implements EventListener{\r\n\r\n\t\t@Override\r\n\t\tpublic void execute(Device source, String type,\r\n\t\t\t\tMap<String, String> parameters) {\r\n\t\t\t//finds the device and invoke the SwitchOn function\r\n\t\t\tfindDeviceByName(\"Lamp\").invoke(\"SwitchOn\");\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\tclass OnSwitchOff implements EventListener{\r\n\r\n\t\t@Override\r\n\t\tpublic void execute(Device source, String type,\tMap<String, String> parameters) {\r\n\t\t\t\r\n\t\t\t//finds the Lamp device and invokes the SwitchOff event\r\n\t\t\tfindDeviceByName(\"Lamp\").invoke(\"SwitchOff\");\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n\r\nThis automatic page generator is the easiest way to create beautiful pages for all of your projects. Author your page content here using GitHub Flavored Markdown, select a template crafted by a designer, and publish. After your page is generated, you can check out the new branch:\r\n\r\n```\r\n$ cd your_repo_root/repo_name\r\n$ git fetch origin\r\n$ git checkout gh-pages\r\n```\r\n\r\nIf you're using the GitHub for Mac, simply sync your repository and you'll see the new branch.\r\n\r\n### Designer Templates\r\nWe've crafted some handsome templates for you to use. Go ahead and continue to layouts to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved if it remained markdown format.\r\n\r\n### Rather Drive Stick?\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator written by our own Tom Preston-Werner. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor's GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out the documentation at https://help.github.com/pages or contact support@github.com and weâ€™ll help you sort it out.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}